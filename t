[1mdiff --git a/megatron/core.py b/megatron/core.py[m
[1mindex fd7fd5d..867ca34 100644[m
[1m--- a/megatron/core.py[m
[1m+++ b/megatron/core.py[m
[36m@@ -1,13 +1,7 @@[m
 import os[m
 import numpy as np[m
 import inspect[m
[31m-from .utils import listify, md5_hash[m
[31m-[m
[31m-[m
[31m-class EagerRunException(Exception):[m
[31m-    def __init__(self):[m
[31m-        message = "Graph.run() should not be called when running in Eager Execution mode."[m
[31m-        super().__init__(message)[m
[32m+[m[32mfrom . import utils[m
 [m
 [m
 class Feature:[m
[36m@@ -30,7 +24,7 @@[m [mclass Feature:[m
 [m
     def __str__(self):[m
         if self.str is None:[m
[31m-            self.str = md5_hash(self.output)[m
[32m+[m[32m            self.str = utils.md5_hash(self.output)[m
         return self.str[m
 [m
     def run(self, observations):[m
[36m@@ -38,14 +32,49 @@[m [mclass Feature:[m
         self.output = observations[m
 [m
 [m
[32m+[m[32mclass Lambda:[m
[32m+[m[32m    def __init__(self, function, **kwargs):[m
[32m+[m[32m        self.function = function[m
[32m+[m[32m        self.kwargs = kwargs[m
[32m+[m
[32m+[m[32m    def __call__(self, *inputs):[m
[32m+[m[32m        return self.function(*inputs, **self.kwargs)[m
[32m+[m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        kw_values = [str(hp) for hp in self.kwargs.values()][m
[32m+[m[32m        return '{}({})'.format(self.__class__.__name__, ','.join(kw_values))[m
[32m+[m
[32m+[m
[32m+[m[32mclass Transformer:[m
[32m+[m[32m    def __init__(self, **kwargs):[m
[32m+[m[32m        self.metadata = utils.MetadataDict()[m
[32m+[m[32m        self.kwargs = utils.KwargsDict(kwargs)[m
[32m+[m[32m        self.is_fitted = False[m
[32m+[m
[32m+[m[32m    def __call__(self, *inputs):[m
[32m+[m[32m        if not self.is_fitted:[m
[32m+[m[32m            self.fit(*inputs)[m
[32m+[m[32m            self.is_fitted = True[m
[32m+[m[32m        return self.transform(*inputs)[m
[32m+[m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        hp_values = [str(hp) for hp in self.kwargs.values()][m
[32m+[m[32m        return '{}({})'.format(self.__class__.__name__, ','.join(hp_values))[m
[32m+[m
[32m+[m[32m    def fit(self, *inputs):[m
[32m+[m[32m        pass[m
[32m+[m
[32m+[m[32m    def transform(self, *inputs):[m
[32m+[m[32m        return inputs[m
[32m+[m
[32m+[m
 class Transformation:[m
[31m-    def __init__(self, function, **hyperparameters):[m
[32m+[m[32m    def __init__(self, transformer):[m
         self.input_nodes = [][m
         self.output = None[m
         self.graph = None[m
         self.str = None[m
[31m-        self.function = function[m
[31m-        self.hyperparameters = hyperparameters[m
[32m+[m[32m        self.transformer = transformer[m
 [m
     def _check_same_graph(self):[m
         if len(set([node.graph for node in self.input_nodes])) > 1:[m
[36m@@ -54,12 +83,12 @@[m [mclass Transformation:[m
     def __str__(self):[m
        if not self.str:[m
            s = inspect.getsource(self.function)[m
[31m-           s += str(self.hyperparameters)[m
[31m-           self.str = md5_hash(s)[m
[32m+[m[32m           s += str(self.transformer)[m
[32m+[m[32m           self.str = utils.md5_hash(s)[m
        return self.str[m
 [m
     def __call__(self, input_nodes):[m
[31m-        self.input_nodes = listify(input_nodes)[m
[32m+[m[32m        self.input_nodes = utils.listify(input_nodes)[m
         self._check_same_graph()[m
 [m
         self.graph = self.input_nodes[0].graph[m
[36m@@ -71,24 +100,22 @@[m [mclass Transformation:[m
         return self[m
 [m
     def run(self):[m
[31m-        # so we don't duplicate calculation within the same session[m
[31m-        if self.output is not None:[m
[31m-            return[m
         inputs = [node.output for node in self.input_nodes][m
[31m-        self.output = self.function(*inputs, **self.hyperparameters)[m
[32m+[m[32m        self.output = self.transformer(*inputs)[m
 [m
 [m
 class Graph:[m
[31m-    def __init__(self, cache_path='../cache'):[m
[32m+[m[32m    def __init__(self, train_mode=True, cache_path='../cache'):[m
[32m+[m[32m        self.train_mode = train_mode[m
         self.cache_path = cache_path[m
         if not os.path.exists(self.cache_path):[m
             os.mkdir(self.cache_path)[m
         self.eager = False[m
[31m-        self.features = {}[m
[32m+[m[32m        self.features = set()[m
         self.transformations = set()[m
 [m
     def add_feature(self, feature):[m
[31m-        self.features[feature.name] = feature[m
[32m+[m[32m        self.features.add(feature)[m
 [m
     def add_transformation(self, transformation):[m
         self.transformations.add(transformation)[m
[36m@@ -112,7 +139,7 @@[m [mclass Graph:[m
         # skip to end, walk the path backwards looking for saves; if none, save this one[m
         node_index = len(full_path) - 1[m
         while full_path[node_index].output is None:[m
[31m-            path_hash = md5_hash(''.join(str(node) for node in full_path[:node_index+1]))[m
[32m+[m[32m            path_hash = utils.md5_hash(''.join(str(node) for node in full_path[:node_index+1]))[m
             filepath = "{}/{}.npz".format(self.cache_path, path_hash)[m
             if os.path.exists(filepath):[m
                 full_path[node_index].output = np.load(filepath)['arr'][m
[36m@@ -129,7 +156,7 @@[m [mclass Graph:[m
             node_index += 1[m
         # cache full path as compressed file for future use, unless it already exists[m
         out = full_path[-1].output[m
[31m-        path_hash = md5_hash(''.join(str(node) for node in full_path))[m
[32m+[m[32m        path_hash = utils.md5_hash(''.join(str(node) for node in full_path))[m
         if not os.path.exists(path_hash):[m
             np.savez_compressed('{}/{}.npz'.format(self.cache_path, path_hash), arr=out)[m
         # return the terminal node's resulting data[m
[36m@@ -146,9 +173,9 @@[m [mclass Graph:[m
 [m
     def run(self, output_nodes, feed_dict, cache=True):[m
         if self.eager:[m
[31m-            raise EagerRunException()[m
[32m+[m[32m            raise utils.EagerRunException()[m
         out = [][m
[31m-        output_nodes = listify(output_nodes)[m
[32m+[m[32m        output_nodes = utils.listify(output_nodes)[m
         for output_node in output_nodes:[m
             if cache:[m
                 out.append(self._run_path_with_caching(output_node, feed_dict))[m
